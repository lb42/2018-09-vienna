<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>XSLT for Idiots</title>
        <title>A sketchy introduction to the basics of TEI processing</title>
        <author>Lou Burnard Consulting</author>

      </titleStmt>
      <editionStmt>
        <edition>
          <date>august 2016</date>
        </edition>
      </editionStmt>
      <publicationStmt>
        <publisher xml:id="LBC">Lou Burnard Consulting</publisher>
        <availability>
          <p>Freely available for use and derivative works under a Creative Commons Attribution
            license.</p>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>Translated and adapted from Rahtz 2009-07-23; previous talks, TEI Guidelines, etc.</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change who="#LBC" when="2016-08-03">Translated back to English for Vilnius</change>

    </revisionDesc>
  </teiHeader>
  <text>
    <body>

      <div type="slide">
        <head>Objectives</head>
        <p rend="box">This is not a complete XSLT Training Course! Its purpose is just to ... </p>
        <list type="bulleted">
          <item>give you a taste of what XSLT and XPath can do</item>
          <item>particularly when processing TEI-XML documents</item>
          <item>particularly TEI documents from the Humanities</item>
          <item>introduce a few of the essential concepts of XSLT</item>
        </list>
      </div>

      <div type="slide">
        <head>XSL: a set of complementary standards</head>
        <p>
          <list type="unordered">
            <item>XPath: a standard syntax for addressing and accessing parts of an XML tree</item>
            <item>XSLT: a standard language for transforming XML trees </item>
            <item>XSL FO: an XML vocabulary for the description of page layout </item>
          </list>
        </p>
        <p>Like XML itself, all three are developed and maintained by the W3C.</p>
      </div>

      <!--
<div type="slide"><head>A quoi sert le XSL ?</head>
<list type="bulleted">
<item>Un document XML n'est qu'une chaîne de caractères Unicode avec
des balises: pourquoi pas le traîter en tant que tel?</item>
<item>Parce que les balises representent quelque chose de plus
signifiant : l'arborescence.</item>
<item>Parce que le syntax XML permet des variations ...
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[
<foo       bar= "x" baz = "z"></foo>
<foo
baz= "z" bar = 
"x"/>]]>
</egXML>
</item>
<item>Parce que la <emph>structuration</emph> d'un document XML fait partie de sa
signification</item>
 </list>
</div>
-->

      <div type="slide">
        <head>What is an <term>XML tree</term>?</head>
        <p><graphic height="50%" url="../images/arborescence.png"/></p>
        <list type="bulleted">
          <item>a set of <term>nodes</term>, organised hierarchically</item>
          <item>each node either has a <term>generic identifier</term> (its "type") or is a
              <term>text node</term></item>
          <item>a single <term>root node</term> contains (or dominates) all the others</item>
          <item>each node can contain (or dominate) <list type="bulleted">
              <item>a subtree</item>
              <item>or a text node</item>
              <!--item>facultativement un ensemble d'<term>attributs</term></item-->
            </list></item>
          <!--item>chaque attribut comporte un <term>nom</term> et un <term>valeur</term> </item-->
        </list>
      </div>

      <div type="slide">
        <head>In an XML Tree... </head>
        <list type="bulleted">
          <item>each node corresponds with a named element</item>
          <item>the <term>attributes </term>of an element make up a sub-tree associated with a
            particular node</item>
          <item>each attribute has a <term>name</term> and a <term>value</term>
          </item>
        </list>
      </div>

      <div type="slide">
        <head>For example : </head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <body type="anthology">
            <div type="poem">
              <head>The SICK ROSE </head>
              <lg type="stanza">
                <l n="1">O Rose thou art sick.</l>
                <l n="2">The invisible worm,</l>
                <l n="3">That flies in the night </l>
                <l n="4">In the howling storm:</l>
              </lg>
              <lg type="stanza">
                <l n="5">Has found out thy bed </l>
                <l n="6">Of crimson joy:</l>
                <l n="7">And his dark secret love </l>
                <l n="8">Does thy life destroy.</l>
              </lg>
            </div>

            <div type="shortpoem">
              <head>Queen Anne's tipple</head>
              <lg type="couplet">
                <l n="1">Here thou Great Anna whom three realms obey</l>
                <l n="2">Doth sometimes council take, and sometimes tea.</l>
              </lg>
            </div>
          </body>
        </egXML>
        <!--figure><graphic url="xpath-eg-0.png"/></figure-->
      </div>
      <div type="slide">
        <head>.. or, represented as a tree : </head>
        <figure>
          <graphic url="../images/xpath-eg-1.png"/>
        </figure>
      </div>



      <div type="slide">
        <head>XPath : a road map</head>
        <p>To access the components of an XML document, you supply a <term>path</term>, specifying
          the nodes you must pass through to get to the part you want</p>
        <p>For example, to get to the <gi>head</gi>s in this example, you start at the
          <gi>body</gi>, then go down one level to a child <gi>div</gi>, within which you go down a
          third level to find a <gi>head</gi>
        </p>
        <p>In XPath, we say <code>body/div/head</code></p>
      </div>

      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-06.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-07.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-08.png"/>
        </figure>
      </div>

      <div type="slide">
        <head>Stages on the path</head>
        <list type="bulleted">
          <item>As we go along the path, we can look at other things besides XML modes ...</item>
          <item>we can check attributes </item>
          <item>and text nodes</item>
        </list>
      </div>

      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-09.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-10.png"/>
        </figure>
      </div>
      <!-- text() example needed -->

      <div type="slide">
        <head>Selection</head>
        <list type="bulleted">
          <item>We can select from the nodes we visit, by expressing a <term>restriction</term>
            using brackets [ and ] </item>
          <item>A restriction might test the value (or just the presence) of an attribute</item>
          <item>or the sequential position of a node in the whole tree</item>
          <item>or the presence of an element of a specific type at a specific place</item>
        </list>
      </div>

      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-12.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-13.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-14.png"/>
        </figure>
      </div>

      <div type="slide">
        <head>The starting point</head>
        <p>An XPath can start from any point in the tree: <list type="bulleted">
            <item><code>//</code> means <q>anywhere in the tree</q></item>
            <item><code>..</code> means <q>my parent</q></item>
          </list>
        </p>
        <p>We can move freely around the hierarchy of nodes using <term>axes</term> such as
            <code>ancestor::</code>, <code>following-sibling::</code>, <code>descendant::</code> ...
        </p>
      </div>

      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-17.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-18.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-19.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-20.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-21.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-22.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-23.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-24.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-25.png"/>
        </figure>
      </div>
      <div type="slide">
        <head/>
        <figure>
          <graphic url="../images/xpath-eg-26.png"/>
        </figure>
      </div>

      <div type="slide">
        <head>XPath Functions</head>
        <p>XPath also provides an extensive library of useful functions. We mention a few here : <list type="bulleted">
            <item><code>count(x)</code> returns a count of the number of nodes in the tree x</item>
            <item><code>position()</code> returns the sequential number of the current node within
              its context</item>
            <item><code>last()</code> returns the sequential number of the last node within its
              context</item>
            <item><code>contains(x,y)</code>returns TRUE if the string <code>y</code> is contained
              in the text node <code>x</code>
            </item>
          </list>
        </p>
      </div>

      <div type="slide">
        <head>First Exercise</head>
        <p>Have a look at the first part of the exercise to see whether you have understood
          xpath</p>
      </div>

      <div type="slide">
        <head>How do you use XSLT ?</head>
        <p><figure>
            <graphic url="../images/xslt-use.png" height="80%"/>
          </figure></p>
        <p rend="box">XSLT is a transformation language</p>
      </div>
      <div type="slide">
        <head>And what is a <soCalled>transformation</soCalled>?</head>
        <p>Starting from this : <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <ref target="http://www.tei-c.org">The TEI website</ref>
          </egXML> we want to generate this : <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <a href="http://www.tei-c.org">The TEI website</a></egXML> So we must .... <list type="bulleted">
            <item>transform the TEI element <gi>ref</gi> into an (x)HTML element <gi>a</gi>
            </item>
            <item>transform its <att>target</att> son attribut into an <att>href</att>
              attribute</item>
          </list>
        </p>
      </div>

      <div type="slide">
        <head>How do we express that in XSLT?</head>

        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
            xpath-default-namespace="http://www.tei-c.org/ns/1.0" version="2.0">
            <xsl:template match="ref">
              <a href="{@target}">
                <xsl:apply-templates/>
              </a>
            </xsl:template>
          </xsl:stylesheet>
        </egXML>
      </div>
      <div type="slide">
        <head>A slightly less trivial example</head>
        <p>From this : <egXML xmlns="http://www.tei-c.org/ns/Examples">
<div type="recipe" n="34">
              <head>Pasta for Beginners</head>
              <list>
                <item>pasta</item>
                <item>grated cheese</item>
              </list>
              <p>Boil the pasta and mix it with the cheese.</p>
            </div>
          </egXML> we want to produce : <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <html xmlns="http://www.w3.org/1999/xhtml">
              <h1>34: Pasta for Beginners</h1>
              <p>Ingredients: pasta grated cheese</p>
              <p>Boil the pasta and mix it with the cheese.</p>
            </html>
          </egXML>
        </p>
      </div>

      <div type="slide">
        <head>How do we express that in XSLT?</head>
        <p>
          <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
              xpath-default-namespace="http://www.tei-c.org/ns/1.0" 
              version="2.0">
              <xsl:template match="div[@type='recipe']">
                <html>
                  <h1>
                    <xsl:value-of select="@n"/>: <xsl:value-of select="head"/>
                  </h1>
                  <p>Ingredients: <xsl:apply-templates select="list/item"/>
                  </p>
                  <p><xsl:value-of select="p"/></p>
                </html>
              </xsl:template>
            </xsl:stylesheet>
          </egXML>
        </p>
      </div>



      <div type="slide">
        <head>An XSLT stylesheet</head>
        <list type="bulleted">
          <item>is an XML document, containing special elements from the XSLT namespace
              <code>http://www.w3.org/1999/XSL/Transform</code>
          </item>
          <item>The element <gi>xsl:stylesheet</gi> (root element for a stylesheet) can also name
            other namespaces, in particular a default one for elements being referenced or created;
            it also specifies which version of the XSLT standard is being used (1 or 2)</item>
          <item>The element <gi>xsl:output</gi> : specifies various things about the output to be
            generated, notable its format (HTML, XML, TEXT...), character encoding (ISO-8859-1,
            UTF-8 ...) etc.</item>
        </list>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <xsl:stylesheet xpath-default-namespace="http://www.tei-c.org/ns/1.0" 
            version="2.0">
            <xsl:output method="html" encoding="ISO-8859-1"/>
            <xsl:template match="/">
              <xsl:apply-templates/>
            </xsl:template>
          </xsl:stylesheet>
        </egXML>
      </div>



      <div type="slide">
        <head>Ten essential XSLT elements</head>
        <list >
          <item><gi>xsl:template</gi> defines a <term>template</term></item>
          <item><gi>xsl:apply-templates</gi> applies templates</item>
          <item><gi>xsl:value-of</gi> returns the value of a node </item>
          <item><gi>xsl:text</gi> returns a bit of text </item>
          <item><gi>xsl:element</gi>, <gi>xsl:attribute</gi> and <gi>xsl:comment</gi> create an
            element, attribute, or comment in the output </item>
          <item><gi>xsl:if</gi> and <gi>xsl:choose</gi> conditional actions</item>
          <item><gi>xsl:for-each</gi> looping actions </item>
          <item><gi>xsl:variable</gi> define a variable</item>
          <item><gi>xsl:number</gi> generate a number </item>
          <item><gi>xsl:sort</gi> perform an ordering</item>
        </list>
      </div>


      <div type="slide">
        <head><gi>xml:template</gi></head>

        <p>This element provides a template or model for the actionms which should be performed when
          the node or nodes specified by its <att>match</att> attributes are found </p>
        <p>It may contain other XSL elements, or elements from other name spaces (which will be
          coped to the output), or nothing at all.</p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <xsl:stylesheet xpath-default-namespace="http://www.tei-c.org/ns/1.0" version="2.0">
              <xsl:template match="div"> 
                &lt;!-- .... actions for all div elements ....-->
            </xsl:template> 
            <xsl:template match="head"> 
              &lt;!-- .... actions for all head elements....--> 
            </xsl:template> 
            <xsl:template match="div/head"> 
              &lt;!-- .... actions for head elements contained by a div....--> 
            </xsl:template> 
            <xsl:template match="teiHeader"/> 
          </xsl:stylesheet>
        </egXML>
      </div>
      <!--
<div type="slide">
<head>Wild cards</head>
<p>A part des éléments et des attributs, l'attribut <ident>match</ident> sur  <gi>xsl:template</gi>
peut indiquer... 
<table>
  <row><cell><code>/</code></cell><cell>la racine du document </cell></row>
  <row><cell><code>*</code></cell><cell>tout élément</cell></row>
  <row><cell><code>@*</code></cell><cell>tout attribut</cell></row>
  <row><cell><code>text()</code></cell><cell>tout morceau de texte</cell></row>
</table>

<egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:template match="*">
&lt;!- - actions par defaut pour tout élément - ->
</xsl:template>

<xsl:template match="@*">
&lt;!- - actions par defaut pour tout attribut - ->
</xsl:template>
</egXML>

<egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:template match="text()"/>
</egXML>


</p>
</div>
-->
      <div type="slide">
        <head>The six golden rules of XSLT</head>
        <p>By default, the XML tree is processed element by element, starting from the root <list
            type="numbered">
            <item>If no template matches the element you are looking at, process its children </item>
            <item>If there are no more elements to process by rule 1, emit any text nodes contained
              by the element you are looking at</item>
            <item>An element is processed only when a template matches it</item>
            <item>The order of templates in a stylesheet has no significance</item>
            <item>Any part of the XML tree can be accessed, in any order, any number of times</item>
            <item>A stylesheet must contain only well formed XML </item>
          </list>
        </p>
      </div>

      <div type="slide">
        <head>Exercise 2</head>
        <p>However, it is much easier to understand how XSLT works by looking at a real example. </p>
        <p>So... let's do exercise 2.</p>

      </div>
      <!--
<div type="slide"><head>Contenu d'un template</head>
<p>Les éléments XML d'un nom d'espaces autre que le XSL se trouvant dans un
template sont sortis sans changement. </p>
<p>Les fragments textuels (plus ou moins) pareils.</p>
<p>Un template vide requiert la sortie de ... rien, donc (s'il est
invoqué) il supprime les noeuds concernes.</p>
</div>


<div type="slide">
<head>Plusieures templates peuvent etre spécifies pour un meme élément en
des contextes divers</head>
<p>Comparer
<egXML xmlns="http://www.tei-c.org/ns/Examples" >
<xsl:template match="head">
  ....
</xsl:template>
</egXML>
avec
<egXML xmlns="http://www.tei-c.org/ns/Examples" >
<xsl:template match="div/head">
 ...
</xsl:template>
<xsl:template match="figure/head">
 ....
</xsl:template>
</egXML>
</p>
<p>En cas de conflit, c'est  le template le plus spécifique qui
gagne.</p>
</div>


<div type="slide">
<head><gi>xsl:apply-templates</gi></head>

<p>Cet élément rend disponible dans le contexte courant les regles
contenus par les templates indiques dans son attribut
<att>select</att>. Si aucun template n'est indiqué, tous les templates
sont disponibles. </p>

 <egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:template match="/">
 <html>
   <xsl:apply-templates/>
  </html>
</xsl:template>
</egXML>

  <egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:template match="TEI"   >
 <xsl:apply-templates select="text"/>
</xsl:template>
</egXML>
<p>Il est tres utile pour varier l'ordre des sorties:
  <egXML xmlns="http://www.tei-c.org/ns/Examples"   >
    <xsl:template match="text">
      <h1>Corps du texte</h1>
      <xsl:apply-templates select="body"/>
      <h1>Pièces liminaires</h1>
      <xsl:apply-templates select="front"/>
      <xsl:apply-templates select="back"/>
</xsl:template>
</egXML>
</p></div>

<div ><head><gi>xsl:value-of</gi></head>
<p>Cet élément fait sortir la valeur d'un élément ou d'un attribut :

  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:value-of
	select="/TEI/teiHeader/fileDesc/titleStmt/title"/>
  </egXML>
</p>

<p>Attention aux doublons potentiels!

<egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:template match="div">
 <h2> <xsl:value-of select="@n"/>
 <xsl:value-of select="head"/></h2>
 <xsl:apply-templates/>
</xsl:template>

<xsl:template match="div/head" />
</egXML>
</p>
   </div>-->

      <!--
<div type="slide"><head>Attention: à ne pas confondre...</head>
<list type="bulleted">
<item><gi>xsl:value-of select="XX"</gi> fait sortir le contenu des
noeuds indiques par le XPath "XX".</item>
 <item><gi>xsl:apply-templates select="XX"</gi> fait traiter les
templates disponibles pour les noeuds indiques par le XPath "XX"</item>
<item><gi>xsl:template match="XX"</gi> n'a aucun effet direct : il sert a définir
le correspondence entre ce template et l'élément XX</item>
</list>
</div>

<div type="slide">
  <head>Evaluation des valeurs d'attribut</head>
  <p>On a : 
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <ref target="http://www.gallica.bnf.fr">site Gallica</ref>
  </egXML>
On veut :
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <a  xmlns="http://www.w3.org/1999/xhtml" href="http://www.gallica.bnf.fr"/>
  </egXML>
</p>
  
 <p>Ceci ne sera <emph>pas</emph> efficace :
  <egXML xmlns="http://www.tei-c.org/ns/Examples" >
    <xsl:template match="ref">
      <a href="@target">
	<xsl:apply-templates/>
      </a>
    </xsl:template>
  </egXML>
  </p>
<p>parce qu'il donnera à l'attribut <att>href</att> la valeur  <q>@target</q>!</p>

</div>

<div type="slide">
<head>Une astuce syntaxique...</head>
<p>On se sert de  <code>{}</code> pour indiquer qu'une expression
doit être  <hi>evaluée</hi>:
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="ref" >
      <a href="{@target}">
	<xsl:apply-templates/>
      </a>
    </xsl:template>
  </egXML>
  </p>
<p>Ceci donnera à l'attribut <att>href</att>  la valeur de l' attribut
<att>target</att> quelle que soit la valeur de ce dernier</p>
</div>

<div type="slide"><head><gi>xsl:element</gi>, <gi>xsl:attribute</gi>, <gi>xsl:comment</gi></head>
<p>Ces éléments font apparaitre des éléments XML dans l'arbre de
sortie. Ils sont un peu plus verbose que les abbréviations
presentées jusqu'à là, mais peut-être plus élégant...

  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="ref" >
      <xsl:élément name="a">
	<xsl:attribute name="href">
	  <xsl:value-of select="@target"/>
</xsl:attribute>
	<xsl:apply-templates/>
      </xsl:élément>
    </xsl:template>
  </egXML>
 est l'equivalent de
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="ref" >
      <a href="{@target}">
	<xsl:apply-templates/>
      </a>
    </xsl:template>
  </egXML>
</p>
</div>

<div type="slide"><head><gi>xsl:text</gi> : faire sortir un morceau de texte</head>
<p>Cet élément est utile pour englober un morceau de texte
explicitement (au lieu de le donner directement dans le corps du
template). 
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="item" >
<xsl:élément name="p">
<xsl:text>
 ITEM </xsl:text><xsl:apply-templates/>
</xsl:élément>
    </xsl:template>
  </egXML>
</p>
</div>

<div type="slide">
  <head> <gi>xsl:if</gi> : faire une épreuve</head>
  <p>Cet élément permet des actions conditionelles :
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="person">
      <xsl:if test="@sex='1'">
	<li>
	  <xsl:value-of select="persName"/>
	</li>
      </xsl:if>
    </xsl:template>
</egXML>
cf.
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="person[@sex='1']">
	<li>
	  <xsl:value-of select="persName"/>
	</li>
    </xsl:template>
    <xsl:template match="person"/>
  </egXML>
  </p>
</div>

<div type="slide">
  <head><gi>xsl:choose</gi>: faire un choix</head>
  <p>Cet élément permet des actions conditionelles un peu plus
  complexes :
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="person">
      <xsl:apply-templates/>
      <xsl:choose>
	<xsl:when test="@sex='1'">
	  (mâle)
	</xsl:when>
	<xsl:when test="@sex='2'">
	  (femelle)
	</xsl:when>
	<xsl:when test="not(@sex)">
	  (sexe non spécifié)
	</xsl:when>
	<xsl:otherwise>
	  (code de sexe inconnu: <xsl:value-of select="@sex"/>)
	</xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </egXML>
  </p>
</div>


<div type="slide">
  <head><gi>xsl:for-each</gi> : faire une iteration</head>
  <p>Cet élément permet un bouclage des actions :
  <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="small">
    <xsl:template match="listPerson" >
      <ul>
	<xsl:for-each select="person">
	  <li>
	    <xsl:value-of select="persName"/>
	  </li>
	</xsl:for-each>
      </ul>
    </xsl:template>
  </egXML>
cf.
  <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="small">
    <xsl:template match="listPerson" >
      <ul>
	<xsl:apply-templates select="person"/>
      </ul>
    </xsl:template>
    <xsl:template match="person" >
      <li>
	<xsl:value-of select="persName"/>
      </li>
    </xsl:template>
  </egXML>
  </p>
</div>

<div type="slide"><head><gi>xsl:variable</gi> : creation de variable</head>
<p>Cet élément permet d'associer un nom avec un ensemble de noeuds, ou
avec une chaine de caracteres, par exemple pour faciliter sa ré-utilisation
plusieurs fois dans un même stylesheet.
  <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="small">
<xsl:variable name="modernise">
oui
</xsl:variable>
<xsl:if test='$modernise = "oui"'>
 ....
</xsl:if>
</egXML>
</p>
</div>

<div type="slide">
  <head> <gi>xsl:number</gi> : numerotation </head>
  <p>On peut generer une numérotation derivée de la séquence des
  éléments dans l'arborescence XML...
  <list type="ordered">
    <item>par rapport a l'élément parent:
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="p">
      <xsl:number/>
    </xsl:template>
  </egXML>
    </item>
    <item>par rapport au document entier :
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="p">
      <xsl:number level="any"/>
    </xsl:template>
  </egXML>
    </item>
    <item>par rapport a un élément ancêtre spécifique:
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="l">
      <xsl:number level="any" from="lg"/>
    </xsl:template>
  </egXML>
    </item>
  </list>
  </p>
</div>

<div type="slide"><head><gi>xsl:sort</gi> : faire un tri</head>
<p>Cet élément permet de trier un ensemble de noeuds resultant d'un
élément <gi>xsl:apply-templates</gi> ou <gi>xsl:for-each</gi>.
<egXML xmlns="http://www.tei-c.org/ns/Examples">
                     <xsl:template match="text">
                        <ul>
                           <xsl:for-each select="//persName">
                              <xsl:sort select="normalize-space(.)" data-type="text"
                                 order="ascending"/>
                              <li>
                                 <xsl:value-of select="."/>
                              </li>
                           </xsl:for-each>
                        </ul>
                     </xsl:template>
                  </egXML>
</p>

</div>

<div type="slide">
  <head>Sommaire</head>
  <p>Maintenant vous savez comment
  <list type="ordered">
    <item>créer des templates </item>
    <item>séléctionner des morceaux de texte</item>
    <item>ajouter des éléments </item>
    <item>définir des actions conditionnelles</item>
    <item>numéroter et trier les objets de sortie</item>
  </list>
  </p>
<p>On va expérimenter cela dans la deuxieme partie de l'exercice....</p>
</div>
-->
      <div type="slide">
        <head>Pour en savoir plus</head>
        <list type="bulleted">

          <item>A <ref target="http://www.gchagnon.fr/cours/xml/">http://www.gchagnon.fr/cours/xml/
            </ref> vous trouverez deux cours complets et très clairs</item>
          <item>Un texte classique: Philippe Rigaux et Bernd Amann <title>Comprendre XSLT</title>.
            O'Reilly, 2002.</item>
          <item>Beaucoup, beaucoup, d'autres ressources anglophones...</item>
        </list>
      </div>

    </body>
  </text>
</TEI>
